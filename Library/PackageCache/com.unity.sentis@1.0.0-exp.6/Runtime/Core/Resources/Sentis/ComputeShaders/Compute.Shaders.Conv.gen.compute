// This is auto-generated -- do not modify directly

#pragma kernel Conv2D_KxK
#pragma kernel Conv2D_1x1
#pragma kernel Conv1D_KxK
#pragma kernel Conv1D_1x1

StructuredBuffer<float> Xptr;
StructuredBuffer<float> Wptr;
StructuredBuffer<float> Bptr;
RWStructuredBuffer<float> Optr;

uint inputChannels;
uint inputHeight;
uint inputWidth;
uint kernelHeight;
uint kernelWidth;
uint outputChannels;
uint outputHeight;
uint outputWidth;
uint strideHeight;
uint strideWidth;
uint padHeight;
uint padWidth;
uint dilationHeight;
uint dilationWidth;
uint inputChannelsSize;
uint outputChannelsSize;
uint kernelChannelSize;

uint inputSize;
uint outputSize;
float _MinValue;


#define BLOCK_SIZE_X        4
#define BLOCK_SIZE_Y        8
#define BLOCK_SIZE_K        

#define THREAD_COUNT_X      16
#define THREAD_COUNT_Y      8

#define TILE_SIZE_X         (BLOCK_SIZE_X * THREAD_COUNT_X)
#define TILE_SIZE_Y         (BLOCK_SIZE_Y * THREAD_COUNT_Y)
#define TILE_SIZE_K         16

groupshared float4 _wTile[TILE_SIZE_Y * (TILE_SIZE_K+1) / 4];
groupshared float4 _xTile[TILE_SIZE_X * (TILE_SIZE_K+0) / 4];

//#define XTILE(k, tid, bx) _xTile[(k) * THREAD_COUNT_X * 2 + (tid) * 2 + ((bx) >> 2)][(bx) & 3]
#define XTILE(k, tid, bx) _xTile[(tid) + (k) * THREAD_COUNT_X][(bx) & 3]
//#define WTILE(tid, k, by) _wTile[(tid) * TILE_SIZE_K * 2 + (k) * 2 + ((by) >> 2)][(by) & 3]
#if BLOCK_SIZE_Y == 4
#define WTILE(tid, k, by) _wTile[(k) * (THREAD_COUNT_Y + 1) + (tid)][(by) & 3]
#else
#define WTILE(tid, k, by) _wTile[(k) * (THREAD_COUNT_Y * 2 + 1) + (tid) * 2 + ((by) >> 2)][(by) & 3]
#endif


[numthreads(THREAD_COUNT_X, THREAD_COUNT_Y, 1)]
void Conv2D_KxK(uint3 groupThreadID : SV_GroupThreadID, uint3 groupID : SV_GroupID)
{
    uint bx, by;

    uint baseOutputX = groupID.x * TILE_SIZE_X + groupThreadID.x;
    uint baseOutputY = groupID.y * TILE_SIZE_Y + groupThreadID.y;
    uint batchReadOffset = groupID.z * inputChannelsSize;
    uint batchWriteOffset = groupID.z * outputChannelsSize;

    uint K = kernelChannelSize;


    uint4 ihBase;
    uint4 iwBase;
    [unroll]
    for (bx = 0; bx < BLOCK_SIZE_X; bx++)
    {
        ihBase[bx] = ((baseOutputX + bx * THREAD_COUNT_X) / outputWidth) * strideHeight - padHeight;
        iwBase[bx] = ((baseOutputX + bx * THREAD_COUNT_X) % outputWidth) * strideWidth - padWidth;
    }


    float4 accum0 = 0.0f;
    float4 accum1 = 0.0f;
    float4 accum2 = 0.0f;
    float4 accum3 = 0.0f;
    float4 accum4 = 0.0f;
    float4 accum5 = 0.0f;
    float4 accum6 = 0.0f;
    float4 accum7 = 0.0f;

    uint kyyStride = K * THREAD_COUNT_Y;
    uint kxxStride = THREAD_COUNT_Y * inputSize;

    for (uint outerK = 0; outerK < K; outerK += TILE_SIZE_K)
    {
        float wLoad_y0;
        float wLoad_y1;
        float wLoad_y2;
        float wLoad_y3;
        float wLoad_y4;
        float wLoad_y5;
        float wLoad_y6;
        float wLoad_y7;
        {
            uint oy = baseOutputY * K + outerK + groupThreadID.x;
            {
                wLoad_y0 = Wptr[oy];
                oy += kyyStride;
            }
            {
                wLoad_y1 = Wptr[oy];
                oy += kyyStride;
            }
            {
                wLoad_y2 = Wptr[oy];
                oy += kyyStride;
            }
            {
                wLoad_y3 = Wptr[oy];
                oy += kyyStride;
            }
            {
                wLoad_y4 = Wptr[oy];
                oy += kyyStride;
            }
            {
                wLoad_y5 = Wptr[oy];
                oy += kyyStride;
            }
            {
                wLoad_y6 = Wptr[oy];
                oy += kyyStride;
            }
            {
                wLoad_y7 = Wptr[oy];
                oy += kyyStride;
            }
        }

        float xLoad_k0_x0;
        float xLoad_k0_x1;
        float xLoad_k0_x2;
        float xLoad_k0_x3;
        float xLoad_k1_x0;
        float xLoad_k1_x1;
        float xLoad_k1_x2;
        float xLoad_k1_x3;

        {
            uint k = outerK + 0 * THREAD_COUNT_Y + groupThreadID.y;

            uint kw = (k % kernelWidth);
            uint kh = (k / kernelWidth) % kernelHeight;
            uint ic = (k / kernelWidth) / kernelHeight;

            {
                uint ih = dilationHeight * kh + ihBase[0];
                uint iw = dilationWidth * kw + iwBase[0];

                float xVal = 0.0f;
                if (ih < inputHeight && iw < inputWidth && k < K)
                    xVal = Xptr[batchReadOffset + ic * inputSize + ih * inputWidth + iw];
                xLoad_k0_x0 = xVal;
            }
            {
                uint ih = dilationHeight * kh + ihBase[1];
                uint iw = dilationWidth * kw + iwBase[1];

                float xVal = 0.0f;
                if (ih < inputHeight && iw < inputWidth && k < K)
                    xVal = Xptr[batchReadOffset + ic * inputSize + ih * inputWidth + iw];
                xLoad_k0_x1 = xVal;
            }
            {
                uint ih = dilationHeight * kh + ihBase[2];
                uint iw = dilationWidth * kw + iwBase[2];

                float xVal = 0.0f;
                if (ih < inputHeight && iw < inputWidth && k < K)
                    xVal = Xptr[batchReadOffset + ic * inputSize + ih * inputWidth + iw];
                xLoad_k0_x2 = xVal;
            }
            {
                uint ih = dilationHeight * kh + ihBase[3];
                uint iw = dilationWidth * kw + iwBase[3];

                float xVal = 0.0f;
                if (ih < inputHeight && iw < inputWidth && k < K)
                    xVal = Xptr[batchReadOffset + ic * inputSize + ih * inputWidth + iw];
                xLoad_k0_x3 = xVal;
            }
        }
        {
            uint k = outerK + 1 * THREAD_COUNT_Y + groupThreadID.y;

            uint kw = (k % kernelWidth);
            uint kh = (k / kernelWidth) % kernelHeight;
            uint ic = (k / kernelWidth) / kernelHeight;

            {
                uint ih = dilationHeight * kh + ihBase[0];
                uint iw = dilationWidth * kw + iwBase[0];

                float xVal = 0.0f;
                if (ih < inputHeight && iw < inputWidth && k < K)
                    xVal = Xptr[batchReadOffset + ic * inputSize + ih * inputWidth + iw];
                xLoad_k1_x0 = xVal;
            }
            {
                uint ih = dilationHeight * kh + ihBase[1];
                uint iw = dilationWidth * kw + iwBase[1];

                float xVal = 0.0f;
                if (ih < inputHeight && iw < inputWidth && k < K)
                    xVal = Xptr[batchReadOffset + ic * inputSize + ih * inputWidth + iw];
                xLoad_k1_x1 = xVal;
            }
            {
                uint ih = dilationHeight * kh + ihBase[2];
                uint iw = dilationWidth * kw + iwBase[2];

                float xVal = 0.0f;
                if (ih < inputHeight && iw < inputWidth && k < K)
                    xVal = Xptr[batchReadOffset + ic * inputSize + ih * inputWidth + iw];
                xLoad_k1_x2 = xVal;
            }
            {
                uint ih = dilationHeight * kh + ihBase[3];
                uint iw = dilationWidth * kw + iwBase[3];

                float xVal = 0.0f;
                if (ih < inputHeight && iw < inputWidth && k < K)
                    xVal = Xptr[batchReadOffset + ic * inputSize + ih * inputWidth + iw];
                xLoad_k1_x3 = xVal;
            }
        }

        GroupMemoryBarrierWithGroupSync();

        WTILE(groupThreadID.y, groupThreadID.x, 0) = wLoad_y0;
        WTILE(groupThreadID.y, groupThreadID.x, 1) = wLoad_y1;
        WTILE(groupThreadID.y, groupThreadID.x, 2) = wLoad_y2;
        WTILE(groupThreadID.y, groupThreadID.x, 3) = wLoad_y3;
        WTILE(groupThreadID.y, groupThreadID.x, 4) = wLoad_y4;
        WTILE(groupThreadID.y, groupThreadID.x, 5) = wLoad_y5;
        WTILE(groupThreadID.y, groupThreadID.x, 6) = wLoad_y6;
        WTILE(groupThreadID.y, groupThreadID.x, 7) = wLoad_y7;

        XTILE(groupThreadID.y + 0 * THREAD_COUNT_Y, groupThreadID.x, 0) = xLoad_k0_x0;
        XTILE(groupThreadID.y + 0 * THREAD_COUNT_Y, groupThreadID.x, 1) = xLoad_k0_x1;
        XTILE(groupThreadID.y + 0 * THREAD_COUNT_Y, groupThreadID.x, 2) = xLoad_k0_x2;
        XTILE(groupThreadID.y + 0 * THREAD_COUNT_Y, groupThreadID.x, 3) = xLoad_k0_x3;
        XTILE(groupThreadID.y + 1 * THREAD_COUNT_Y, groupThreadID.x, 0) = xLoad_k1_x0;
        XTILE(groupThreadID.y + 1 * THREAD_COUNT_Y, groupThreadID.x, 1) = xLoad_k1_x1;
        XTILE(groupThreadID.y + 1 * THREAD_COUNT_Y, groupThreadID.x, 2) = xLoad_k1_x2;
        XTILE(groupThreadID.y + 1 * THREAD_COUNT_Y, groupThreadID.x, 3) = xLoad_k1_x3;

        GroupMemoryBarrierWithGroupSync();

        for (uint innerK = 0; innerK < TILE_SIZE_K; innerK++)
        {
            float4 xMultiplier;
            xMultiplier[0] = XTILE(innerK, groupThreadID.x, 0);
            xMultiplier[1] = XTILE(innerK, groupThreadID.x, 1);
            xMultiplier[2] = XTILE(innerK, groupThreadID.x, 2);
            xMultiplier[3] = XTILE(innerK, groupThreadID.x, 3);

            float wMultiplier0 = WTILE(groupThreadID.y, innerK, 0);
            float wMultiplier1 = WTILE(groupThreadID.y, innerK, 1);
            float wMultiplier2 = WTILE(groupThreadID.y, innerK, 2);
            float wMultiplier3 = WTILE(groupThreadID.y, innerK, 3);
            float wMultiplier4 = WTILE(groupThreadID.y, innerK, 4);
            float wMultiplier5 = WTILE(groupThreadID.y, innerK, 5);
            float wMultiplier6 = WTILE(groupThreadID.y, innerK, 6);
            float wMultiplier7 = WTILE(groupThreadID.y, innerK, 7);

            accum0 = mad(xMultiplier, wMultiplier0, accum0);
            accum1 = mad(xMultiplier, wMultiplier1, accum1);
            accum2 = mad(xMultiplier, wMultiplier2, accum2);
            accum3 = mad(xMultiplier, wMultiplier3, accum3);
            accum4 = mad(xMultiplier, wMultiplier4, accum4);
            accum5 = mad(xMultiplier, wMultiplier5, accum5);
            accum6 = mad(xMultiplier, wMultiplier6, accum6);
            accum7 = mad(xMultiplier, wMultiplier7, accum7);
        }
    }

    float bias[BLOCK_SIZE_Y];
    [unroll]
    for (by = 0; by < BLOCK_SIZE_Y; by++)
    {
        uint oy = baseOutputY + by * THREAD_COUNT_Y;
        bias[by] = Bptr[oy];
    }

    [unroll]
    for (bx = 0; bx < BLOCK_SIZE_X; bx++)
    {
        uint oy = baseOutputY + 0 * THREAD_COUNT_Y;
        uint ox = baseOutputX + bx * THREAD_COUNT_X;
        uint storeIndex = 0xFFFFFFFF;
        if (oy < outputChannels && ox < outputSize)
            storeIndex = batchWriteOffset + oy * outputSize + ox;
        Optr[storeIndex] = max(accum0[bx] + bias[0], _MinValue);
    }
    [unroll]
    for (bx = 0; bx < BLOCK_SIZE_X; bx++)
    {
        uint oy = baseOutputY + 1 * THREAD_COUNT_Y;
        uint ox = baseOutputX + bx * THREAD_COUNT_X;
        uint storeIndex = 0xFFFFFFFF;
        if (oy < outputChannels && ox < outputSize)
            storeIndex = batchWriteOffset + oy * outputSize + ox;
        Optr[storeIndex] = max(accum1[bx] + bias[1], _MinValue);
    }
    [unroll]
    for (bx = 0; bx < BLOCK_SIZE_X; bx++)
    {
        uint oy = baseOutputY + 2 * THREAD_COUNT_Y;
        uint ox = baseOutputX + bx * THREAD_COUNT_X;
        uint storeIndex = 0xFFFFFFFF;
        if (oy < outputChannels && ox < outputSize)
            storeIndex = batchWriteOffset + oy * outputSize + ox;
        Optr[storeIndex] = max(accum2[bx] + bias[2], _MinValue);
    }
    [unroll]
    for (bx = 0; bx < BLOCK_SIZE_X; bx++)
    {
        uint oy = baseOutputY + 3 * THREAD_COUNT_Y;
        uint ox = baseOutputX + bx * THREAD_COUNT_X;
        uint storeIndex = 0xFFFFFFFF;
        if (oy < outputChannels && ox < outputSize)
            storeIndex = batchWriteOffset + oy * outputSize + ox;
        Optr[storeIndex] = max(accum3[bx] + bias[3], _MinValue);
    }
    [unroll]
    for (bx = 0; bx < BLOCK_SIZE_X; bx++)
    {
        uint oy = baseOutputY + 4 * THREAD_COUNT_Y;
        uint ox = baseOutputX + bx * THREAD_COUNT_X;
        uint storeIndex = 0xFFFFFFFF;
        if (oy < outputChannels && ox < outputSize)
            storeIndex = batchWriteOffset + oy * outputSize + ox;
        Optr[storeIndex] = max(accum4[bx] + bias[4], _MinValue);
    }
    [unroll]
    for (bx = 0; bx < BLOCK_SIZE_X; bx++)
    {
        uint oy = baseOutputY + 5 * THREAD_COUNT_Y;
        uint ox = baseOutputX + bx * THREAD_COUNT_X;
        uint storeIndex = 0xFFFFFFFF;
        if (oy < outputChannels && ox < outputSize)
            storeIndex = batchWriteOffset + oy * outputSize + ox;
        Optr[storeIndex] = max(accum5[bx] + bias[5], _MinValue);
    }
    [unroll]
    for (bx = 0; bx < BLOCK_SIZE_X; bx++)
    {
        uint oy = baseOutputY + 6 * THREAD_COUNT_Y;
        uint ox = baseOutputX + bx * THREAD_COUNT_X;
        uint storeIndex = 0xFFFFFFFF;
        if (oy < outputChannels && ox < outputSize)
            storeIndex = batchWriteOffset + oy * outputSize + ox;
        Optr[storeIndex] = max(accum6[bx] + bias[6], _MinValue);
    }
    [unroll]
    for (bx = 0; bx < BLOCK_SIZE_X; bx++)
    {
        uint oy = baseOutputY + 7 * THREAD_COUNT_Y;
        uint ox = baseOutputX + bx * THREAD_COUNT_X;
        uint storeIndex = 0xFFFFFFFF;
        if (oy < outputChannels && ox < outputSize)
            storeIndex = batchWriteOffset + oy * outputSize + ox;
        Optr[storeIndex] = max(accum7[bx] + bias[7], _MinValue);
    }
}
[numthreads(THREAD_COUNT_X, THREAD_COUNT_Y, 1)]
void Conv2D_1x1(uint3 groupThreadID : SV_GroupThreadID, uint3 groupID : SV_GroupID)
{
    uint bx, by;

    uint baseOutputX = groupID.x * TILE_SIZE_X + groupThreadID.x;
    uint baseOutputY = groupID.y * TILE_SIZE_Y + groupThreadID.y;
    uint batchReadOffset = groupID.z * inputChannelsSize;
    uint batchWriteOffset = groupID.z * outputChannelsSize;

    uint K = kernelChannelSize;


    uint4 oSpatialDimV;
    [unroll]
    for (bx = 0; bx < BLOCK_SIZE_X; bx++)
    {
        uint ohV = (baseOutputX + bx * THREAD_COUNT_X) / outputWidth;
        uint owV = (baseOutputX + bx * THREAD_COUNT_X) % outputWidth;

        ohV = ohV * strideHeight - padHeight;
        owV = owV * strideWidth - padWidth;

        oSpatialDimV[bx] = ohV * inputWidth + owV + groupThreadID.y * inputSize;
    }


    float4 accum0 = 0.0f;
    float4 accum1 = 0.0f;
    float4 accum2 = 0.0f;
    float4 accum3 = 0.0f;
    float4 accum4 = 0.0f;
    float4 accum5 = 0.0f;
    float4 accum6 = 0.0f;
    float4 accum7 = 0.0f;

    uint kyyStride = K * THREAD_COUNT_Y;
    uint kxxStride = THREAD_COUNT_Y * inputSize;

    for (uint outerK = 0; outerK < K; outerK += TILE_SIZE_K)
    {
        float wLoad_y0;
        float wLoad_y1;
        float wLoad_y2;
        float wLoad_y3;
        float wLoad_y4;
        float wLoad_y5;
        float wLoad_y6;
        float wLoad_y7;
        {
            uint oy = baseOutputY * K + outerK + groupThreadID.x;
            {
                wLoad_y0 = Wptr[oy];
                oy += kyyStride;
            }
            {
                wLoad_y1 = Wptr[oy];
                oy += kyyStride;
            }
            {
                wLoad_y2 = Wptr[oy];
                oy += kyyStride;
            }
            {
                wLoad_y3 = Wptr[oy];
                oy += kyyStride;
            }
            {
                wLoad_y4 = Wptr[oy];
                oy += kyyStride;
            }
            {
                wLoad_y5 = Wptr[oy];
                oy += kyyStride;
            }
            {
                wLoad_y6 = Wptr[oy];
                oy += kyyStride;
            }
            {
                wLoad_y7 = Wptr[oy];
                oy += kyyStride;
            }
        }

        float xLoad_k0_x0;
        float xLoad_k0_x1;
        float xLoad_k0_x2;
        float xLoad_k0_x3;
        float xLoad_k1_x0;
        float xLoad_k1_x1;
        float xLoad_k1_x2;
        float xLoad_k1_x3;

        {
            uint k = outerK + 0 * THREAD_COUNT_Y + groupThreadID.y;

            {
                float xVal = 0.0f;
    //          if (ih < inputHeight && iw < inputWidth && k < inputChannels)
    //              xVal = Xptr[kxx * inputSize + oSpatialDimV[bx]];
                if (k < K)
                    xVal = Xptr[batchReadOffset + oSpatialDimV[0]];
                xLoad_k0_x0 = xVal;
                oSpatialDimV[0] += kxxStride;
            }
            {
                float xVal = 0.0f;
    //          if (ih < inputHeight && iw < inputWidth && k < inputChannels)
    //              xVal = Xptr[kxx * inputSize + oSpatialDimV[bx]];
                if (k < K)
                    xVal = Xptr[batchReadOffset + oSpatialDimV[1]];
                xLoad_k0_x1 = xVal;
                oSpatialDimV[1] += kxxStride;
            }
            {
                float xVal = 0.0f;
    //          if (ih < inputHeight && iw < inputWidth && k < inputChannels)
    //              xVal = Xptr[kxx * inputSize + oSpatialDimV[bx]];
                if (k < K)
                    xVal = Xptr[batchReadOffset + oSpatialDimV[2]];
                xLoad_k0_x2 = xVal;
                oSpatialDimV[2] += kxxStride;
            }
            {
                float xVal = 0.0f;
    //          if (ih < inputHeight && iw < inputWidth && k < inputChannels)
    //              xVal = Xptr[kxx * inputSize + oSpatialDimV[bx]];
                if (k < K)
                    xVal = Xptr[batchReadOffset + oSpatialDimV[3]];
                xLoad_k0_x3 = xVal;
                oSpatialDimV[3] += kxxStride;
            }
        }
        {
            uint k = outerK + 1 * THREAD_COUNT_Y + groupThreadID.y;

            {
                float xVal = 0.0f;
    //          if (ih < inputHeight && iw < inputWidth && k < inputChannels)
    //              xVal = Xptr[kxx * inputSize + oSpatialDimV[bx]];
                if (k < K)
                    xVal = Xptr[batchReadOffset + oSpatialDimV[0]];
                xLoad_k1_x0 = xVal;
                oSpatialDimV[0] += kxxStride;
            }
            {
                float xVal = 0.0f;
    //          if (ih < inputHeight && iw < inputWidth && k < inputChannels)
    //              xVal = Xptr[kxx * inputSize + oSpatialDimV[bx]];
                if (k < K)
                    xVal = Xptr[batchReadOffset + oSpatialDimV[1]];
                xLoad_k1_x1 = xVal;
                oSpatialDimV[1] += kxxStride;
            }
            {
                float xVal = 0.0f;
    //          if (ih < inputHeight && iw < inputWidth && k < inputChannels)
    //              xVal = Xptr[kxx * inputSize + oSpatialDimV[bx]];
                if (k < K)
                    xVal = Xptr[batchReadOffset + oSpatialDimV[2]];
                xLoad_k1_x2 = xVal;
                oSpatialDimV[2] += kxxStride;
            }
            {
                float xVal = 0.0f;
    //          if (ih < inputHeight && iw < inputWidth && k < inputChannels)
    //              xVal = Xptr[kxx * inputSize + oSpatialDimV[bx]];
                if (k < K)
                    xVal = Xptr[batchReadOffset + oSpatialDimV[3]];
                xLoad_k1_x3 = xVal;
                oSpatialDimV[3] += kxxStride;
            }
        }

        GroupMemoryBarrierWithGroupSync();

        WTILE(groupThreadID.y, groupThreadID.x, 0) = wLoad_y0;
        WTILE(groupThreadID.y, groupThreadID.x, 1) = wLoad_y1;
        WTILE(groupThreadID.y, groupThreadID.x, 2) = wLoad_y2;
        WTILE(groupThreadID.y, groupThreadID.x, 3) = wLoad_y3;
        WTILE(groupThreadID.y, groupThreadID.x, 4) = wLoad_y4;
        WTILE(groupThreadID.y, groupThreadID.x, 5) = wLoad_y5;
        WTILE(groupThreadID.y, groupThreadID.x, 6) = wLoad_y6;
        WTILE(groupThreadID.y, groupThreadID.x, 7) = wLoad_y7;

        XTILE(groupThreadID.y + 0 * THREAD_COUNT_Y, groupThreadID.x, 0) = xLoad_k0_x0;
        XTILE(groupThreadID.y + 0 * THREAD_COUNT_Y, groupThreadID.x, 1) = xLoad_k0_x1;
        XTILE(groupThreadID.y + 0 * THREAD_COUNT_Y, groupThreadID.x, 2) = xLoad_k0_x2;
        XTILE(groupThreadID.y + 0 * THREAD_COUNT_Y, groupThreadID.x, 3) = xLoad_k0_x3;
        XTILE(groupThreadID.y + 1 * THREAD_COUNT_Y, groupThreadID.x, 0) = xLoad_k1_x0;
        XTILE(groupThreadID.y + 1 * THREAD_COUNT_Y, groupThreadID.x, 1) = xLoad_k1_x1;
        XTILE(groupThreadID.y + 1 * THREAD_COUNT_Y, groupThreadID.x, 2) = xLoad_k1_x2;
        XTILE(groupThreadID.y + 1 * THREAD_COUNT_Y, groupThreadID.x, 3) = xLoad_k1_x3;

        GroupMemoryBarrierWithGroupSync();

        for (uint innerK = 0; innerK < TILE_SIZE_K; innerK++)
        {
            float4 xMultiplier;
            xMultiplier[0] = XTILE(innerK, groupThreadID.x, 0);
            xMultiplier[1] = XTILE(innerK, groupThreadID.x, 1);
            xMultiplier[2] = XTILE(innerK, groupThreadID.x, 2);
            xMultiplier[3] = XTILE(innerK, groupThreadID.x, 3);

            float wMultiplier0 = WTILE(groupThreadID.y, innerK, 0);
            float wMultiplier1 = WTILE(groupThreadID.y, innerK, 1);
            float wMultiplier2 = WTILE(groupThreadID.y, innerK, 2);
            float wMultiplier3 = WTILE(groupThreadID.y, innerK, 3);
            float wMultiplier4 = WTILE(groupThreadID.y, innerK, 4);
            float wMultiplier5 = WTILE(groupThreadID.y, innerK, 5);
            float wMultiplier6 = WTILE(groupThreadID.y, innerK, 6);
            float wMultiplier7 = WTILE(groupThreadID.y, innerK, 7);

            accum0 = mad(xMultiplier, wMultiplier0, accum0);
            accum1 = mad(xMultiplier, wMultiplier1, accum1);
            accum2 = mad(xMultiplier, wMultiplier2, accum2);
            accum3 = mad(xMultiplier, wMultiplier3, accum3);
            accum4 = mad(xMultiplier, wMultiplier4, accum4);
            accum5 = mad(xMultiplier, wMultiplier5, accum5);
            accum6 = mad(xMultiplier, wMultiplier6, accum6);
            accum7 = mad(xMultiplier, wMultiplier7, accum7);
        }
    }

    float bias[BLOCK_SIZE_Y];
    [unroll]
    for (by = 0; by < BLOCK_SIZE_Y; by++)
    {
        uint oy = baseOutputY + by * THREAD_COUNT_Y;
        bias[by] = Bptr[oy];
    }

    [unroll]
    for (bx = 0; bx < BLOCK_SIZE_X; bx++)
    {
        uint oy = baseOutputY + 0 * THREAD_COUNT_Y;
        uint ox = baseOutputX + bx * THREAD_COUNT_X;
        uint storeIndex = 0xFFFFFFFF;
        if (oy < outputChannels && ox < outputSize)
            storeIndex = batchWriteOffset + oy * outputSize + ox;
        Optr[storeIndex] = max(accum0[bx] + bias[0], _MinValue);
    }
    [unroll]
    for (bx = 0; bx < BLOCK_SIZE_X; bx++)
    {
        uint oy = baseOutputY + 1 * THREAD_COUNT_Y;
        uint ox = baseOutputX + bx * THREAD_COUNT_X;
        uint storeIndex = 0xFFFFFFFF;
        if (oy < outputChannels && ox < outputSize)
            storeIndex = batchWriteOffset + oy * outputSize + ox;
        Optr[storeIndex] = max(accum1[bx] + bias[1], _MinValue);
    }
    [unroll]
    for (bx = 0; bx < BLOCK_SIZE_X; bx++)
    {
        uint oy = baseOutputY + 2 * THREAD_COUNT_Y;
        uint ox = baseOutputX + bx * THREAD_COUNT_X;
        uint storeIndex = 0xFFFFFFFF;
        if (oy < outputChannels && ox < outputSize)
            storeIndex = batchWriteOffset + oy * outputSize + ox;
        Optr[storeIndex] = max(accum2[bx] + bias[2], _MinValue);
    }
    [unroll]
    for (bx = 0; bx < BLOCK_SIZE_X; bx++)
    {
        uint oy = baseOutputY + 3 * THREAD_COUNT_Y;
        uint ox = baseOutputX + bx * THREAD_COUNT_X;
        uint storeIndex = 0xFFFFFFFF;
        if (oy < outputChannels && ox < outputSize)
            storeIndex = batchWriteOffset + oy * outputSize + ox;
        Optr[storeIndex] = max(accum3[bx] + bias[3], _MinValue);
    }
    [unroll]
    for (bx = 0; bx < BLOCK_SIZE_X; bx++)
    {
        uint oy = baseOutputY + 4 * THREAD_COUNT_Y;
        uint ox = baseOutputX + bx * THREAD_COUNT_X;
        uint storeIndex = 0xFFFFFFFF;
        if (oy < outputChannels && ox < outputSize)
            storeIndex = batchWriteOffset + oy * outputSize + ox;
        Optr[storeIndex] = max(accum4[bx] + bias[4], _MinValue);
    }
    [unroll]
    for (bx = 0; bx < BLOCK_SIZE_X; bx++)
    {
        uint oy = baseOutputY + 5 * THREAD_COUNT_Y;
        uint ox = baseOutputX + bx * THREAD_COUNT_X;
        uint storeIndex = 0xFFFFFFFF;
        if (oy < outputChannels && ox < outputSize)
            storeIndex = batchWriteOffset + oy * outputSize + ox;
        Optr[storeIndex] = max(accum5[bx] + bias[5], _MinValue);
    }
    [unroll]
    for (bx = 0; bx < BLOCK_SIZE_X; bx++)
    {
        uint oy = baseOutputY + 6 * THREAD_COUNT_Y;
        uint ox = baseOutputX + bx * THREAD_COUNT_X;
        uint storeIndex = 0xFFFFFFFF;
        if (oy < outputChannels && ox < outputSize)
            storeIndex = batchWriteOffset + oy * outputSize + ox;
        Optr[storeIndex] = max(accum6[bx] + bias[6], _MinValue);
    }
    [unroll]
    for (bx = 0; bx < BLOCK_SIZE_X; bx++)
    {
        uint oy = baseOutputY + 7 * THREAD_COUNT_Y;
        uint ox = baseOutputX + bx * THREAD_COUNT_X;
        uint storeIndex = 0xFFFFFFFF;
        if (oy < outputChannels && ox < outputSize)
            storeIndex = batchWriteOffset + oy * outputSize + ox;
        Optr[storeIndex] = max(accum7[bx] + bias[7], _MinValue);
    }
}
[numthreads(THREAD_COUNT_X, THREAD_COUNT_Y, 1)]
void Conv1D_KxK(uint3 groupThreadID : SV_GroupThreadID, uint3 groupID : SV_GroupID)
{
    uint bx, by;

    uint baseOutputX = groupID.x * TILE_SIZE_X + groupThreadID.x;
    uint baseOutputY = groupID.y * TILE_SIZE_Y + groupThreadID.y;
    uint batchReadOffset = groupID.z * inputChannelsSize;
    uint batchWriteOffset = groupID.z * outputChannelsSize;

    uint K = kernelChannelSize;


    uint4 ihBase;
    [unroll]
    for (bx = 0; bx < BLOCK_SIZE_X; bx++)
    {
        ihBase[bx] = (baseOutputX + bx * THREAD_COUNT_X) * strideHeight - padHeight;
    }


    float4 accum0 = 0.0f;
    float4 accum1 = 0.0f;
    float4 accum2 = 0.0f;
    float4 accum3 = 0.0f;
    float4 accum4 = 0.0f;
    float4 accum5 = 0.0f;
    float4 accum6 = 0.0f;
    float4 accum7 = 0.0f;

    uint kyyStride = K * THREAD_COUNT_Y;
    uint kxxStride = THREAD_COUNT_Y * inputSize;

    for (uint outerK = 0; outerK < K; outerK += TILE_SIZE_K)
    {
        float wLoad_y0;
        float wLoad_y1;
        float wLoad_y2;
        float wLoad_y3;
        float wLoad_y4;
        float wLoad_y5;
        float wLoad_y6;
        float wLoad_y7;
        {
            uint oy = baseOutputY * K + outerK + groupThreadID.x;
            {
                wLoad_y0 = Wptr[oy];
                oy += kyyStride;
            }
            {
                wLoad_y1 = Wptr[oy];
                oy += kyyStride;
            }
            {
                wLoad_y2 = Wptr[oy];
                oy += kyyStride;
            }
            {
                wLoad_y3 = Wptr[oy];
                oy += kyyStride;
            }
            {
                wLoad_y4 = Wptr[oy];
                oy += kyyStride;
            }
            {
                wLoad_y5 = Wptr[oy];
                oy += kyyStride;
            }
            {
                wLoad_y6 = Wptr[oy];
                oy += kyyStride;
            }
            {
                wLoad_y7 = Wptr[oy];
                oy += kyyStride;
            }
        }

        float xLoad_k0_x0;
        float xLoad_k0_x1;
        float xLoad_k0_x2;
        float xLoad_k0_x3;
        float xLoad_k1_x0;
        float xLoad_k1_x1;
        float xLoad_k1_x2;
        float xLoad_k1_x3;

        {
            uint k = outerK + 0 * THREAD_COUNT_Y + groupThreadID.y;

            uint kh = k % kernelHeight;
            uint ic = k / kernelHeight;

            {
                uint ih = dilationHeight * kh + ihBase[0];

                float xVal = 0.0f;
                if (ih < inputHeight && k < K)
                    xVal = Xptr[batchReadOffset + ic * inputSize + ih];
                xLoad_k0_x0 = xVal;
            }
            {
                uint ih = dilationHeight * kh + ihBase[1];

                float xVal = 0.0f;
                if (ih < inputHeight && k < K)
                    xVal = Xptr[batchReadOffset + ic * inputSize + ih];
                xLoad_k0_x1 = xVal;
            }
            {
                uint ih = dilationHeight * kh + ihBase[2];

                float xVal = 0.0f;
                if (ih < inputHeight && k < K)
                    xVal = Xptr[batchReadOffset + ic * inputSize + ih];
                xLoad_k0_x2 = xVal;
            }
            {
                uint ih = dilationHeight * kh + ihBase[3];

                float xVal = 0.0f;
                if (ih < inputHeight && k < K)
                    xVal = Xptr[batchReadOffset + ic * inputSize + ih];
                xLoad_k0_x3 = xVal;
            }
        }
        {
            uint k = outerK + 1 * THREAD_COUNT_Y + groupThreadID.y;

            uint kh = k % kernelHeight;
            uint ic = k / kernelHeight;

            {
                uint ih = dilationHeight * kh + ihBase[0];

                float xVal = 0.0f;
                if (ih < inputHeight && k < K)
                    xVal = Xptr[batchReadOffset + ic * inputSize + ih];
                xLoad_k1_x0 = xVal;
            }
            {
                uint ih = dilationHeight * kh + ihBase[1];

                float xVal = 0.0f;
                if (ih < inputHeight && k < K)
                    xVal = Xptr[batchReadOffset + ic * inputSize + ih];
                xLoad_k1_x1 = xVal;
            }
            {
                uint ih = dilationHeight * kh + ihBase[2];

                float xVal = 0.0f;
                if (ih < inputHeight && k < K)
                    xVal = Xptr[batchReadOffset + ic * inputSize + ih];
                xLoad_k1_x2 = xVal;
            }
            {
                uint ih = dilationHeight * kh + ihBase[3];

                float xVal = 0.0f;
                if (ih < inputHeight && k < K)
                    xVal = Xptr[batchReadOffset + ic * inputSize + ih];
                xLoad_k1_x3 = xVal;
            }
        }

        GroupMemoryBarrierWithGroupSync();

        WTILE(groupThreadID.y, groupThreadID.x, 0) = wLoad_y0;
        WTILE(groupThreadID.y, groupThreadID.x, 1) = wLoad_y1;
        WTILE(groupThreadID.y, groupThreadID.x, 2) = wLoad_y2;
        WTILE(groupThreadID.y, groupThreadID.x, 3) = wLoad_y3;
        WTILE(groupThreadID.y, groupThreadID.x, 4) = wLoad_y4;
        WTILE(groupThreadID.y, groupThreadID.x, 5) = wLoad_y5;
        WTILE(groupThreadID.y, groupThreadID.x, 6) = wLoad_y6;
        WTILE(groupThreadID.y, groupThreadID.x, 7) = wLoad_y7;

        XTILE(groupThreadID.y + 0 * THREAD_COUNT_Y, groupThreadID.x, 0) = xLoad_k0_x0;
        XTILE(groupThreadID.y + 0 * THREAD_COUNT_Y, groupThreadID.x, 1) = xLoad_k0_x1;
        XTILE(groupThreadID.y + 0 * THREAD_COUNT_Y, groupThreadID.x, 2) = xLoad_k0_x2;
        XTILE(groupThreadID.y + 0 * THREAD_COUNT_Y, groupThreadID.x, 3) = xLoad_k0_x3;
        XTILE(groupThreadID.y + 1 * THREAD_COUNT_Y, groupThreadID.x, 0) = xLoad_k1_x0;
        XTILE(groupThreadID.y + 1 * THREAD_COUNT_Y, groupThreadID.x, 1) = xLoad_k1_x1;
        XTILE(groupThreadID.y + 1 * THREAD_COUNT_Y, groupThreadID.x, 2) = xLoad_k1_x2;
        XTILE(groupThreadID.y + 1 * THREAD_COUNT_Y, groupThreadID.x, 3) = xLoad_k1_x3;

        GroupMemoryBarrierWithGroupSync();

        for (uint innerK = 0; innerK < TILE_SIZE_K; innerK++)
        {
            float4 xMultiplier;
            xMultiplier[0] = XTILE(innerK, groupThreadID.x, 0);
            xMultiplier[1] = XTILE(innerK, groupThreadID.x, 1);
            xMultiplier[2] = XTILE(innerK, groupThreadID.x, 2);
            xMultiplier[3] = XTILE(innerK, groupThreadID.x, 3);

            float wMultiplier0 = WTILE(groupThreadID.y, innerK, 0);
            float wMultiplier1 = WTILE(groupThreadID.y, innerK, 1);
            float wMultiplier2 = WTILE(groupThreadID.y, innerK, 2);
            float wMultiplier3 = WTILE(groupThreadID.y, innerK, 3);
            float wMultiplier4 = WTILE(groupThreadID.y, innerK, 4);
            float wMultiplier5 = WTILE(groupThreadID.y, innerK, 5);
            float wMultiplier6 = WTILE(groupThreadID.y, innerK, 6);
            float wMultiplier7 = WTILE(groupThreadID.y, innerK, 7);

            accum0 = mad(xMultiplier, wMultiplier0, accum0);
            accum1 = mad(xMultiplier, wMultiplier1, accum1);
            accum2 = mad(xMultiplier, wMultiplier2, accum2);
            accum3 = mad(xMultiplier, wMultiplier3, accum3);
            accum4 = mad(xMultiplier, wMultiplier4, accum4);
            accum5 = mad(xMultiplier, wMultiplier5, accum5);
            accum6 = mad(xMultiplier, wMultiplier6, accum6);
            accum7 = mad(xMultiplier, wMultiplier7, accum7);
        }
    }

    float bias[BLOCK_SIZE_Y];
    [unroll]
    for (by = 0; by < BLOCK_SIZE_Y; by++)
    {
        uint oy = baseOutputY + by * THREAD_COUNT_Y;
        bias[by] = Bptr[oy];
    }

    [unroll]
    for (bx = 0; bx < BLOCK_SIZE_X; bx++)
    {
        uint oy = baseOutputY + 0 * THREAD_COUNT_Y;
        uint ox = baseOutputX + bx * THREAD_COUNT_X;
        uint storeIndex = 0xFFFFFFFF;
        if (oy < outputChannels && ox < outputSize)
            storeIndex = batchWriteOffset + oy * outputSize + ox;
        Optr[storeIndex] = max(accum0[bx] + bias[0], _MinValue);
    }
    [unroll]
    for (bx = 0; bx < BLOCK_SIZE_X; bx++)
    {
        uint oy = baseOutputY + 1 * THREAD_COUNT_Y;
        uint ox = baseOutputX + bx * THREAD_COUNT_X;
        uint storeIndex = 0xFFFFFFFF;
        if (oy < outputChannels && ox < outputSize)
            storeIndex = batchWriteOffset + oy * outputSize + ox;
        Optr[storeIndex] = max(accum1[bx] + bias[1], _MinValue);
    }
    [unroll]
    for (bx = 0; bx < BLOCK_SIZE_X; bx++)
    {
        uint oy = baseOutputY + 2 * THREAD_COUNT_Y;
        uint ox = baseOutputX + bx * THREAD_COUNT_X;
        uint storeIndex = 0xFFFFFFFF;
        if (oy < outputChannels && ox < outputSize)
            storeIndex = batchWriteOffset + oy * outputSize + ox;
        Optr[storeIndex] = max(accum2[bx] + bias[2], _MinValue);
    }
    [unroll]
    for (bx = 0; bx < BLOCK_SIZE_X; bx++)
    {
        uint oy = baseOutputY + 3 * THREAD_COUNT_Y;
        uint ox = baseOutputX + bx * THREAD_COUNT_X;
        uint storeIndex = 0xFFFFFFFF;
        if (oy < outputChannels && ox < outputSize)
            storeIndex = batchWriteOffset + oy * outputSize + ox;
        Optr[storeIndex] = max(accum3[bx] + bias[3], _MinValue);
    }
    [unroll]
    for (bx = 0; bx < BLOCK_SIZE_X; bx++)
    {
        uint oy = baseOutputY + 4 * THREAD_COUNT_Y;
        uint ox = baseOutputX + bx * THREAD_COUNT_X;
        uint storeIndex = 0xFFFFFFFF;
        if (oy < outputChannels && ox < outputSize)
            storeIndex = batchWriteOffset + oy * outputSize + ox;
        Optr[storeIndex] = max(accum4[bx] + bias[4], _MinValue);
    }
    [unroll]
    for (bx = 0; bx < BLOCK_SIZE_X; bx++)
    {
        uint oy = baseOutputY + 5 * THREAD_COUNT_Y;
        uint ox = baseOutputX + bx * THREAD_COUNT_X;
        uint storeIndex = 0xFFFFFFFF;
        if (oy < outputChannels && ox < outputSize)
            storeIndex = batchWriteOffset + oy * outputSize + ox;
        Optr[storeIndex] = max(accum5[bx] + bias[5], _MinValue);
    }
    [unroll]
    for (bx = 0; bx < BLOCK_SIZE_X; bx++)
    {
        uint oy = baseOutputY + 6 * THREAD_COUNT_Y;
        uint ox = baseOutputX + bx * THREAD_COUNT_X;
        uint storeIndex = 0xFFFFFFFF;
        if (oy < outputChannels && ox < outputSize)
            storeIndex = batchWriteOffset + oy * outputSize + ox;
        Optr[storeIndex] = max(accum6[bx] + bias[6], _MinValue);
    }
    [unroll]
    for (bx = 0; bx < BLOCK_SIZE_X; bx++)
    {
        uint oy = baseOutputY + 7 * THREAD_COUNT_Y;
        uint ox = baseOutputX + bx * THREAD_COUNT_X;
        uint storeIndex = 0xFFFFFFFF;
        if (oy < outputChannels && ox < outputSize)
            storeIndex = batchWriteOffset + oy * outputSize + ox;
        Optr[storeIndex] = max(accum7[bx] + bias[7], _MinValue);
    }
}
[numthreads(THREAD_COUNT_X, THREAD_COUNT_Y, 1)]
void Conv1D_1x1(uint3 groupThreadID : SV_GroupThreadID, uint3 groupID : SV_GroupID)
{
    uint bx, by;

    uint baseOutputX = groupID.x * TILE_SIZE_X + groupThreadID.x;
    uint baseOutputY = groupID.y * TILE_SIZE_Y + groupThreadID.y;
    uint batchReadOffset = groupID.z * inputChannelsSize;
    uint batchWriteOffset = groupID.z * outputChannelsSize;

    uint K = kernelChannelSize;


    uint4 oSpatialDimV;
    [unroll]
    for (bx = 0; bx < BLOCK_SIZE_X; bx++)
    {
        uint ohV = (baseOutputX + bx * THREAD_COUNT_X);

        ohV = ohV * strideHeight - padHeight;

        oSpatialDimV[bx] = ohV + groupThreadID.y * inputSize;
    }


    float4 accum0 = 0.0f;
    float4 accum1 = 0.0f;
    float4 accum2 = 0.0f;
    float4 accum3 = 0.0f;
    float4 accum4 = 0.0f;
    float4 accum5 = 0.0f;
    float4 accum6 = 0.0f;
    float4 accum7 = 0.0f;

    uint kyyStride = K * THREAD_COUNT_Y;
    uint kxxStride = THREAD_COUNT_Y * inputSize;

    for (uint outerK = 0; outerK < K; outerK += TILE_SIZE_K)
    {
        float wLoad_y0;
        float wLoad_y1;
        float wLoad_y2;
        float wLoad_y3;
        float wLoad_y4;
        float wLoad_y5;
        float wLoad_y6;
        float wLoad_y7;
        {
            uint oy = baseOutputY * K + outerK + groupThreadID.x;
            {
                wLoad_y0 = Wptr[oy];
                oy += kyyStride;
            }
            {
                wLoad_y1 = Wptr[oy];
                oy += kyyStride;
            }
            {
                wLoad_y2 = Wptr[oy];
                oy += kyyStride;
            }
            {
                wLoad_y3 = Wptr[oy];
                oy += kyyStride;
            }
            {
                wLoad_y4 = Wptr[oy];
                oy += kyyStride;
            }
            {
                wLoad_y5 = Wptr[oy];
                oy += kyyStride;
            }
            {
                wLoad_y6 = Wptr[oy];
                oy += kyyStride;
            }
            {
                wLoad_y7 = Wptr[oy];
                oy += kyyStride;
            }
        }

        float xLoad_k0_x0;
        float xLoad_k0_x1;
        float xLoad_k0_x2;
        float xLoad_k0_x3;
        float xLoad_k1_x0;
        float xLoad_k1_x1;
        float xLoad_k1_x2;
        float xLoad_k1_x3;

        {
            uint k = outerK + 0 * THREAD_COUNT_Y + groupThreadID.y;

            {
                float xVal = 0.0f;
    //          if (ih < inputHeight && iw < inputWidth && k < inputChannels)
    //              xVal = Xptr[kxx * inputSize + oSpatialDimV[bx]];
                if (k < K)
                    xVal = Xptr[batchReadOffset + oSpatialDimV[0]];
                xLoad_k0_x0 = xVal;
                oSpatialDimV[0] += kxxStride;
            }
            {
                float xVal = 0.0f;
    //          if (ih < inputHeight && iw < inputWidth && k < inputChannels)
    //              xVal = Xptr[kxx * inputSize + oSpatialDimV[bx]];
                if (k < K)
                    xVal = Xptr[batchReadOffset + oSpatialDimV[1]];
                xLoad_k0_x1 = xVal;
                oSpatialDimV[1] += kxxStride;
            }
            {
                float xVal = 0.0f;
    //          if (ih < inputHeight && iw < inputWidth && k < inputChannels)
    //              xVal = Xptr[kxx * inputSize + oSpatialDimV[bx]];
                if (k < K)
                    xVal = Xptr[batchReadOffset + oSpatialDimV[2]];
                xLoad_k0_x2 = xVal;
                oSpatialDimV[2] += kxxStride;
            }
            {
                float xVal = 0.0f;
    //          if (ih < inputHeight && iw < inputWidth && k < inputChannels)
    //              xVal = Xptr[kxx * inputSize + oSpatialDimV[bx]];
                if (k < K)
                    xVal = Xptr[batchReadOffset + oSpatialDimV[3]];
                xLoad_k0_x3 = xVal;
                oSpatialDimV[3] += kxxStride;
            }
        }
        {
            uint k = outerK + 1 * THREAD_COUNT_Y + groupThreadID.y;

            {
                float xVal = 0.0f;
    //          if (ih < inputHeight && iw < inputWidth && k < inputChannels)
    //              xVal = Xptr[kxx * inputSize + oSpatialDimV[bx]];
                if (k < K)
                    xVal = Xptr[batchReadOffset + oSpatialDimV[0]];
                xLoad_k1_x0 = xVal;
                oSpatialDimV[0] += kxxStride;
            }
            {
                float xVal = 0.0f;
    //          if (ih < inputHeight && iw < inputWidth && k < inputChannels)
    //              xVal = Xptr[kxx * inputSize + oSpatialDimV[bx]];
                if (k < K)
                    xVal = Xptr[batchReadOffset + oSpatialDimV[1]];
                xLoad_k1_x1 = xVal;
                oSpatialDimV[1] += kxxStride;
            }
            {
                float xVal = 0.0f;
    //          if (ih < inputHeight && iw < inputWidth && k < inputChannels)
    //              xVal = Xptr[kxx * inputSize + oSpatialDimV[bx]];
                if (k < K)
                    xVal = Xptr[batchReadOffset + oSpatialDimV[2]];
                xLoad_k1_x2 = xVal;
                oSpatialDimV[2] += kxxStride;
            }
            {
                float xVal = 0.0f;
    //          if (ih < inputHeight && iw < inputWidth && k < inputChannels)
    //              xVal = Xptr[kxx * inputSize + oSpatialDimV[bx]];
                if (k < K)
                    xVal = Xptr[batchReadOffset + oSpatialDimV[3]];
                xLoad_k1_x3 = xVal;
                oSpatialDimV[3] += kxxStride;
            }
        }

        GroupMemoryBarrierWithGroupSync();

        WTILE(groupThreadID.y, groupThreadID.x, 0) = wLoad_y0;
        WTILE(groupThreadID.y, groupThreadID.x, 1) = wLoad_y1;
        WTILE(groupThreadID.y, groupThreadID.x, 2) = wLoad_y2;
        WTILE(groupThreadID.y, groupThreadID.x, 3) = wLoad_y3;
        WTILE(groupThreadID.y, groupThreadID.x, 4) = wLoad_y4;
        WTILE(groupThreadID.y, groupThreadID.x, 5) = wLoad_y5;
        WTILE(groupThreadID.y, groupThreadID.x, 6) = wLoad_y6;
        WTILE(groupThreadID.y, groupThreadID.x, 7) = wLoad_y7;

        XTILE(groupThreadID.y + 0 * THREAD_COUNT_Y, groupThreadID.x, 0) = xLoad_k0_x0;
        XTILE(groupThreadID.y + 0 * THREAD_COUNT_Y, groupThreadID.x, 1) = xLoad_k0_x1;
        XTILE(groupThreadID.y + 0 * THREAD_COUNT_Y, groupThreadID.x, 2) = xLoad_k0_x2;
        XTILE(groupThreadID.y + 0 * THREAD_COUNT_Y, groupThreadID.x, 3) = xLoad_k0_x3;
        XTILE(groupThreadID.y + 1 * THREAD_COUNT_Y, groupThreadID.x, 0) = xLoad_k1_x0;
        XTILE(groupThreadID.y + 1 * THREAD_COUNT_Y, groupThreadID.x, 1) = xLoad_k1_x1;
        XTILE(groupThreadID.y + 1 * THREAD_COUNT_Y, groupThreadID.x, 2) = xLoad_k1_x2;
        XTILE(groupThreadID.y + 1 * THREAD_COUNT_Y, groupThreadID.x, 3) = xLoad_k1_x3;

        GroupMemoryBarrierWithGroupSync();

        for (uint innerK = 0; innerK < TILE_SIZE_K; innerK++)
        {
            float4 xMultiplier;
            xMultiplier[0] = XTILE(innerK, groupThreadID.x, 0);
            xMultiplier[1] = XTILE(innerK, groupThreadID.x, 1);
            xMultiplier[2] = XTILE(innerK, groupThreadID.x, 2);
            xMultiplier[3] = XTILE(innerK, groupThreadID.x, 3);

            float wMultiplier0 = WTILE(groupThreadID.y, innerK, 0);
            float wMultiplier1 = WTILE(groupThreadID.y, innerK, 1);
            float wMultiplier2 = WTILE(groupThreadID.y, innerK, 2);
            float wMultiplier3 = WTILE(groupThreadID.y, innerK, 3);
            float wMultiplier4 = WTILE(groupThreadID.y, innerK, 4);
            float wMultiplier5 = WTILE(groupThreadID.y, innerK, 5);
            float wMultiplier6 = WTILE(groupThreadID.y, innerK, 6);
            float wMultiplier7 = WTILE(groupThreadID.y, innerK, 7);

            accum0 = mad(xMultiplier, wMultiplier0, accum0);
            accum1 = mad(xMultiplier, wMultiplier1, accum1);
            accum2 = mad(xMultiplier, wMultiplier2, accum2);
            accum3 = mad(xMultiplier, wMultiplier3, accum3);
            accum4 = mad(xMultiplier, wMultiplier4, accum4);
            accum5 = mad(xMultiplier, wMultiplier5, accum5);
            accum6 = mad(xMultiplier, wMultiplier6, accum6);
            accum7 = mad(xMultiplier, wMultiplier7, accum7);
        }
    }

    float bias[BLOCK_SIZE_Y];
    [unroll]
    for (by = 0; by < BLOCK_SIZE_Y; by++)
    {
        uint oy = baseOutputY + by * THREAD_COUNT_Y;
        bias[by] = Bptr[oy];
    }

    [unroll]
    for (bx = 0; bx < BLOCK_SIZE_X; bx++)
    {
        uint oy = baseOutputY + 0 * THREAD_COUNT_Y;
        uint ox = baseOutputX + bx * THREAD_COUNT_X;
        uint storeIndex = 0xFFFFFFFF;
        if (oy < outputChannels && ox < outputSize)
            storeIndex = batchWriteOffset + oy * outputSize + ox;
        Optr[storeIndex] = max(accum0[bx] + bias[0], _MinValue);
    }
    [unroll]
    for (bx = 0; bx < BLOCK_SIZE_X; bx++)
    {
        uint oy = baseOutputY + 1 * THREAD_COUNT_Y;
        uint ox = baseOutputX + bx * THREAD_COUNT_X;
        uint storeIndex = 0xFFFFFFFF;
        if (oy < outputChannels && ox < outputSize)
            storeIndex = batchWriteOffset + oy * outputSize + ox;
        Optr[storeIndex] = max(accum1[bx] + bias[1], _MinValue);
    }
    [unroll]
    for (bx = 0; bx < BLOCK_SIZE_X; bx++)
    {
        uint oy = baseOutputY + 2 * THREAD_COUNT_Y;
        uint ox = baseOutputX + bx * THREAD_COUNT_X;
        uint storeIndex = 0xFFFFFFFF;
        if (oy < outputChannels && ox < outputSize)
            storeIndex = batchWriteOffset + oy * outputSize + ox;
        Optr[storeIndex] = max(accum2[bx] + bias[2], _MinValue);
    }
    [unroll]
    for (bx = 0; bx < BLOCK_SIZE_X; bx++)
    {
        uint oy = baseOutputY + 3 * THREAD_COUNT_Y;
        uint ox = baseOutputX + bx * THREAD_COUNT_X;
        uint storeIndex = 0xFFFFFFFF;
        if (oy < outputChannels && ox < outputSize)
            storeIndex = batchWriteOffset + oy * outputSize + ox;
        Optr[storeIndex] = max(accum3[bx] + bias[3], _MinValue);
    }
    [unroll]
    for (bx = 0; bx < BLOCK_SIZE_X; bx++)
    {
        uint oy = baseOutputY + 4 * THREAD_COUNT_Y;
        uint ox = baseOutputX + bx * THREAD_COUNT_X;
        uint storeIndex = 0xFFFFFFFF;
        if (oy < outputChannels && ox < outputSize)
            storeIndex = batchWriteOffset + oy * outputSize + ox;
        Optr[storeIndex] = max(accum4[bx] + bias[4], _MinValue);
    }
    [unroll]
    for (bx = 0; bx < BLOCK_SIZE_X; bx++)
    {
        uint oy = baseOutputY + 5 * THREAD_COUNT_Y;
        uint ox = baseOutputX + bx * THREAD_COUNT_X;
        uint storeIndex = 0xFFFFFFFF;
        if (oy < outputChannels && ox < outputSize)
            storeIndex = batchWriteOffset + oy * outputSize + ox;
        Optr[storeIndex] = max(accum5[bx] + bias[5], _MinValue);
    }
    [unroll]
    for (bx = 0; bx < BLOCK_SIZE_X; bx++)
    {
        uint oy = baseOutputY + 6 * THREAD_COUNT_Y;
        uint ox = baseOutputX + bx * THREAD_COUNT_X;
        uint storeIndex = 0xFFFFFFFF;
        if (oy < outputChannels && ox < outputSize)
            storeIndex = batchWriteOffset + oy * outputSize + ox;
        Optr[storeIndex] = max(accum6[bx] + bias[6], _MinValue);
    }
    [unroll]
    for (bx = 0; bx < BLOCK_SIZE_X; bx++)
    {
        uint oy = baseOutputY + 7 * THREAD_COUNT_Y;
        uint ox = baseOutputX + bx * THREAD_COUNT_X;
        uint storeIndex = 0xFFFFFFFF;
        if (oy < outputChannels && ox < outputSize)
            storeIndex = batchWriteOffset + oy * outputSize + ox;
        Optr[storeIndex] = max(accum7[bx] + bias[7], _MinValue);
    }
}
